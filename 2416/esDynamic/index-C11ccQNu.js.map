{"version":3,"file":"index-C11ccQNu.js","sources":["../../src/fixtures/appbar/store/appbar-state.ts","../../src/fixtures/appbar/default-button.vue","../../src/fixtures/appbar/divider.vue","../../node_modules/popper-max-size-modifier/dist/popper-max-size-modifier.esm.js","../../src/fixtures/appbar/more-button.vue","../../src/components/notification-center/appbar-button.vue","../../src/fixtures/appbar/appbar.vue","../../src/fixtures/appbar/api/appbar.ts","../../src/fixtures/appbar/lang/lang.csv?raw","../../src/fixtures/appbar/index.ts"],"sourcesContent":["export type AppbarItemSet = { [name: string]: string | AppbarItemInstance };\n\nexport interface AppbarFixtureConfig {\n    items: (string | AppbarItemConfig)[][];\n}\n\nexport interface AppbarItemConfig {\n    /**\n     * ID of this Appbar item.\n     *\n     * @type {string}\n     * @memberof AppbarItemConfig\n     */\n    id: string;\n\n    /**\n     * ID of the component of this appbar item.\n     *\n     * @type {string}\n     * @memberof AppbarItemConfig\n     */\n    componentId?: string;\n\n    /**\n     * The options for the displayed appbar button.\n     *\n     * @type {object}\n     * @memberof AppbarItemConfig\n     */\n    options?: object;\n}\n\nexport class AppbarItemInstance implements AppbarItemConfig {\n    id: string;\n\n    /**\n     * Optional object containing any options to be passed to the appbar component.\n     *\n     * @type {object}\n     * @memberof AppbarItemInstance\n     */\n    options: object;\n\n    /**\n     * An actual id of the appbar Vue component to use when rendering in the template.\n     *\n     * @type {string}\n     * @memberof AppbarItemInstance\n     */\n    componentId?: string;\n\n    constructor(value: AppbarItemConfig) {\n        const params = {\n            options: {},\n            ...value\n        };\n        ({\n            id: this.id,\n            options: this.options,\n            componentId: this.componentId\n        } = params);\n\n        // this should work too, but it doesn't;\n        // ({ id: this.id, options: this.options } = { options: {}, ...(typeof value === 'string' ? { id: value} : value) });\n    }\n}\n","<template>\n    <appbar-button\n        v-if=\"panelButton\"\n        :onClickFunction=\"onClickFunction\"\n        :tooltip=\"t(panelButton.tooltip)\"\n        :id=\"panelId\"\n        ><div\n            class=\"default fill-current w-24 h-24 ml-8 sm:ml-20\"\n            :class=\"{ 'ml-20': overflow }\"\n            v-html=\"panelButton.icon\"\n        ></div\n    ></appbar-button>\n</template>\n\n<script setup lang=\"ts\">\nimport type { InstanceAPI } from '@/api';\nimport { computed, inject } from 'vue';\nimport { useI18n } from 'vue-i18n';\n\nconst { t } = useI18n();\nconst iApi = inject<InstanceAPI>('iApi');\n\nconst props = defineProps({\n    panelId: {\n        type: String,\n        required: true\n    },\n    minimize: {\n        type: Boolean,\n        default: false\n    },\n    overflow: {\n        type: Boolean\n    }\n});\n\nconst panelButton = computed(() => iApi?.panel.get(props.panelId)?.button);\n\nconst onClickFunction = () => {\n    if (props.minimize) {\n        iApi?.panel.toggleMinimize(props.panelId);\n    } else {\n        iApi?.panel.toggle(props.panelId);\n    }\n};\n</script>\n\n<style lang=\"scss\" scoped></style>\n","<template>\n    <span class=\"border-b p-0 self-center w-2/3\"></span>\n</template>\n\n<script setup lang=\"ts\"></script>\n\n<style lang=\"scss\" scoped>\nspan {\n    height: 0 !important;\n}\n</style>\n","import { detectOverflow } from '@popperjs/core';\n\nvar maxSize = {\n  name: 'maxSize',\n  enabled: true,\n  phase: 'main',\n  requiresIfExists: ['offset', 'preventOverflow', 'flip'],\n  fn: function fn(_ref) {\n    var state = _ref.state,\n        name = _ref.name,\n        options = _ref.options;\n    var overflow = detectOverflow(state, options);\n\n    var _ref2 = state.modifiersData.preventOverflow || {\n      x: 0,\n      y: 0\n    },\n        x = _ref2.x,\n        y = _ref2.y;\n\n    var _state$rects$popper = state.rects.popper,\n        width = _state$rects$popper.width,\n        height = _state$rects$popper.height;\n\n    var _state$placement$spli = state.placement.split('-'),\n        basePlacement = _state$placement$spli[0];\n\n    var widthProp = basePlacement === 'left' ? 'left' : 'right';\n    var heightProp = basePlacement === 'top' ? 'top' : 'bottom';\n    state.modifiersData[name] = {\n      width: width - overflow[widthProp] - x,\n      height: height - overflow[heightProp] - y\n    };\n  }\n};\n\nexport default maxSize;\n","<template>\n    <div class=\"appbar-item relative inset-x-0 w-full text-center\" ref=\"el\">\n        <button\n            type=\"button\"\n            class=\"text-gray-400 w-full h-48 focus:outline-none hover:text-white\"\n            @click=\"popperSetUp()\"\n            v-focus-item\n            :content=\"t('appbar.more')\"\n            :aria-label=\"t('appbar.more')\"\n            v-tippy=\"{ placement: 'right-end' }\"\n            ref=\"dropdownTrigger\"\n        >\n            <svg\n                class=\"fill-current w-24 h-24 m-auto\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 24 24\"\n            >\n                <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n                <path\n                    d=\"M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\"\n                />\n            </svg>\n        </button>\n        <div\n            v-show=\"open\"\n            id=\"dropdown\"\n            class=\"dropdown shadow-md border border-gray:200 absolute w-64 flex flex-col bg-white rounded\"\n            ref=\"dropdown\"\n        >\n            <slot></slot>\n        </div>\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { inject, onBeforeUnmount, onMounted, ref } from 'vue';\nimport { useI18n } from 'vue-i18n';\nimport type { InstanceAPI } from '@/api/internal';\n\nimport type { Placement, Modifier, State } from '@popperjs/core';\nimport { createPopper } from '@popperjs/core';\nimport maxSize from 'popper-max-size-modifier';\n\nconst { t } = useI18n();\nconst iApi = inject('iApi') as InstanceAPI;\n\nconst props = defineProps({\n    position: {\n        type: String,\n        default: 'right-end'\n    },\n    popperOptions: {\n        type: Object,\n        default() {\n            return {};\n        }\n    }\n});\n\nconst open = ref(false);\n\nconst el = ref<Element>();\nconst dropdownTrigger = ref<Element>();\nconst dropdown = ref<HTMLElement>();\n\nconst popperSetUp = () => {\n    open.value = !open.value;\n\n    const applyMaxSize = {\n        name: 'applyMaxSize',\n        enabled: true,\n        phase: 'beforeWrite',\n        requires: ['maxSize'],\n        fn({ state }: { state: State }) {\n            // The `maxSize` modifier provides this data\n            const { width, height } = state.modifiersData.maxSize;\n\n            state.styles.popper = {\n                ...state.styles.popper,\n                maxWidth: `${width}px`,\n                maxHeight: `${Math.max(80, height) - 38}px`\n            };\n\n            state.styles.popper.overflowY = 'auto';\n            state.styles.popper.overflowX = 'hidden';\n        }\n    };\n\n    const innerShell = iApi.$vApp.$el.querySelector('.inner-shell');\n    if (dropdownTrigger.value && dropdown.value) {\n        createPopper(\n            dropdownTrigger.value as Element,\n            dropdown.value as HTMLElement,\n            {\n                placement: (props.position || 'right-end') as Placement,\n                modifiers: [\n                    {\n                        ...maxSize,\n                        options: {\n                            boundary: innerShell\n                        }\n                    },\n                    applyMaxSize as Modifier<'applyMaxsize', {}>,\n                    {\n                        name: 'offset',\n                        options: {\n                            offset: [0, 5]\n                        }\n                    }\n                ],\n                ...props.popperOptions\n            }\n        );\n    }\n};\n\nonMounted(() => {\n    window.addEventListener(\n        'click',\n        event => {\n            if (\n                event.target instanceof HTMLElement &&\n                !el.value?.contains(event.target)\n            ) {\n                open.value = false;\n            }\n        },\n        { capture: true }\n    );\n});\n\nonBeforeUnmount(() => {\n    window.removeEventListener(\n        'click',\n        event => {\n            if (\n                event.target instanceof HTMLElement &&\n                !el.value?.contains(event.target)\n            ) {\n                open.value = false;\n            }\n        },\n        { capture: true }\n    );\n});\n</script>\n\n<style lang=\"scss\" scoped>\n.dropdown {\n    @apply left-full bottom-0;\n}\n</style>\n","<template>\n    <appbar-button\n        :onClickFunction=\"onClick\"\n        :tooltip=\"t('notifications.title')\"\n        class=\"notification-button\"\n        id=\"\"\n    >\n        <!-- https://fonts.google.com/icons?selected=Material%20Icons%3Anotifications -->\n        <svg\n            class=\"fill-current w-24 h-24 mx-8 sm:mx-20\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 24 24\"\n        >\n            <path\n                d=\"M12 22c1.1 0 2-.9 2-2h-4c0 1.1.89 2 2 2zm6-6v-5c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.92 6 11v5l-2 2v1h16v-1l-2-2z\"\n            />\n        </svg>\n        <span\n            class=\"number absolute top-1 right-2 text-white w-18 rounded-full\"\n            v-if=\"number && number > 0\"\n            >{{ number }}</span\n        >\n    </appbar-button>\n</template>\n\n<script setup lang=\"ts\">\nimport { inject, computed } from 'vue';\nimport { useI18n } from 'vue-i18n';\nimport { useNotificationStore } from '@/stores/notification';\nimport type { InstanceAPI } from '@/api';\n\nconst notificationStore = useNotificationStore();\nconst { t } = useI18n();\nconst iApi = inject('iApi') as InstanceAPI;\n\nconst number = computed(() => notificationStore.notificationNumber);\n\nconst onClick = () => {\n    iApi.panel.toggle('notifications');\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.number {\n    background: red;\n    font-size: 0.8em;\n}\n\n.notification-button {\n    position: absolute !important;\n}\n</style>\n","<template>\n    <div\n        class=\"absolute top-0 left-0 bottom-28 flex flex-col w-40 pointer-events-auto appbar z-50 sm:z-20 bg-black-75 sm:w-64 sm:bottom-38\"\n        v-focus-list\n        :content=\"t('panels.controls.items')\"\n        v-tippy=\"{\n            trigger: 'manual',\n            placement: 'top-end',\n            popperOptions: {\n                placement: 'top',\n                modifiers: [\n                    { name: 'preventOverflow', options: { altAxis: true } },\n                    { name: 'flip', options: { fallbackPlacements: ['top'] } }\n                ]\n            }\n        }\"\n        ref=\"el\"\n    >\n        <template v-for=\"(subArray, index) in items\">\n            <template v-for=\"(item, index2) in subArray\">\n                <default-button\n                    v-if=\"\n                        typeof item === 'string' &&\n                        overflowFlags[`${item}-${index2}`] !== true\n                    \"\n                    :key=\"`${item}-${index2}-default`\"\n                    :panelId=\"item\"\n                    class=\"appbar-item h-48\"\n                    :class=\"`identifier-${item}-${index2}`\"\n                ></default-button>\n                <component\n                    v-else-if=\"overflowFlags[`${item}-${index2}`] !== true\"\n                    :is=\"item.componentId\"\n                    :key=\"`${item}-${index2}-custom`\"\n                    :options=\"item.options\"\n                    class=\"appbar-item h-48\"\n                    :id=\"item.id\"\n                    :class=\"`identifier-${item}-${index2}`\"\n                ></component>\n            </template>\n            <divider\n                class=\"appbar-item\"\n                :class=\"`identifier-divider-${index}`\"\n                v-if=\"overflowFlags[`divider-${index}`] !== true\"\n                :key=\"`${subArray}-${index}-default`\"\n            />\n        </template>\n\n        <default-button\n            v-for=\"item in temporaryItems?.filter(\n                t => overflowFlags[`${t}-temp`] !== true\n            )\"\n            :panelId=\"item\"\n            :minimize=\"true\"\n            :key=\"`${item}-temp`\"\n            :class=\"`identifier-${item}-temp`\"\n            class=\"appbar-item h-48\"\n        ></default-button>\n\n        <more-button id=\"more\" v-show=\"overflow\">\n            <template v-slot:default>\n                <template v-for=\"(subArray, index) in items\" :key=\"index\">\n                    <template v-for=\"(item, index2) in subArray\">\n                        <default-button\n                            v-if=\"\n                                typeof item === 'string' &&\n                                overflowFlags[`${item}-${index2}`]\n                            \"\n                            :key=\"`${item}-${index2}-default`\"\n                            :panelId=\"item\"\n                            class=\"text-black hover:bg-gray my-4 h-36\"\n                            :class=\"`identifier-${item}-${index2}`\"\n                            overflow\n                        ></default-button>\n                        <component\n                            v-else-if=\"overflowFlags[`${item}-${index2}`]\"\n                            :is=\"item!.componentId\"\n                            :key=\"`${item}-${index2}-custom`\"\n                            :options=\"item.options\"\n                            :id=\"item.id\"\n                            class=\"appbar-item h-48\"\n                            :class=\"`identifier-${item}-${index2}`\"\n                        ></component>\n                    </template>\n                    <divider\n                        class=\"border-black my-4\"\n                        :class=\"`identifier-divider-${index}`\"\n                        v-if=\"overflowFlags[`divider-${index}`]\"\n                    ></divider>\n                </template>\n\n                <default-button\n                    v-for=\"item in temporaryItems?.filter(\n                        t => overflowFlags[`${t}-temp`]\n                    )\"\n                    :panelId=\"item\"\n                    :minimize=\"true\"\n                    :key=\"`${item}-temp`\"\n                    :class=\"`identifier-${item}-temp`\"\n                    class=\"text-black hover:bg-gray my-4 h-36\"\n                    overflow\n                ></default-button>\n            </template>\n        </more-button>\n        <notifications-appbar-button\n            class=\"appbar-item bottom-48 h-48 sm:display-none\"\n        ></notifications-appbar-button>\n\n        <!-- TODO: disabled this button for now, revist this when we need it in the future -->\n        <!-- <nav-button id=\"nav\"></nav-button> -->\n        <about-ramp-dropdown\n            class=\"absolute bottom-0 h-40 sm:display-none w-full text-center\"\n            position=\"right-start\"\n        ></about-ramp-dropdown>\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport {\n    computed,\n    getCurrentInstance,\n    nextTick,\n    onBeforeMount,\n    onBeforeUnmount,\n    onMounted,\n    onUpdated,\n    ref\n} from 'vue';\nimport DefaultButton from './default-button.vue';\nimport Divider from './divider.vue';\nimport MoreButton from './more-button.vue';\n//import NavAppbarButtonV from './nav-button.vue';\nimport NotificationsAppbarButton from '@/components/notification-center/appbar-button.vue';\nimport AboutRampDropdown from '@/components/about-ramp/about-ramp-dropdown.vue';\nimport { usePanelStore } from '@/stores/panel';\nimport { useAppbarStore } from './store';\nimport { useI18n } from 'vue-i18n';\n\nconst panelStore = usePanelStore();\nconst appbarStore = useAppbarStore();\n\nconst items = computed<any>(() => appbarStore.visible);\nconst temporaryItems = computed<string[] | undefined>(\n    () => appbarStore.temporary\n);\nconst { t } = useI18n();\nconst overflow = ref(false);\nconst overflowFlags = ref<{\n    [key: string]: boolean;\n}>({});\n\nconst el = ref<Element>();\n\nconst blurEvent = () => {\n    (el.value as any)._tippy.hide();\n};\n\nconst keyupEvent = (e: Event) => {\n    const evt = e as KeyboardEvent;\n    if (evt.key === 'Tab' && el.value?.matches(':focus')) {\n        (el.value as any)._tippy.show();\n    }\n};\n\nonMounted(() => {\n    el.value?.addEventListener('blur', blurEvent);\n\n    el.value?.addEventListener('keyup', keyupEvent);\n});\n\nonBeforeMount(() => {\n    const instance = getCurrentInstance();\n    window.addEventListener('resize', () => instance?.proxy?.$forceUpdate());\n});\n\nonBeforeUnmount(() => {\n    const instance = getCurrentInstance();\n    window.removeEventListener('resize', () => instance?.proxy?.$forceUpdate());\n\n    el.value?.removeEventListener('blur', blurEvent);\n\n    el.value?.removeEventListener('keyup', keyupEvent);\n});\n\nonUpdated(() => {\n    nextTick(() => {\n        const element: Element = el.value!;\n        let key: string | undefined = undefined;\n        let children: Element[] = [...element.children];\n        let bound: number | undefined =\n            children[children.length - 2].getBoundingClientRect().top;\n        if (!panelStore.mobileView) {\n            bound = element.getBoundingClientRect().bottom - 38;\n        }\n        let dropdown: Element | null = element.querySelector('#dropdown');\n        // check positions of appbar buttons\n        for (let i = children.length - 4; i >= 0; i--) {\n            let bottom: number = children[i].getBoundingClientRect().bottom;\n            if (\n                bound &&\n                dropdown &&\n                (bottom > bound || (overflow.value && bottom + 56 > bound))\n            ) {\n                children[i].classList.forEach(cl => {\n                    if (cl.includes('identifier')) {\n                        key = cl.slice(11);\n                    }\n                });\n                if (key) overflowFlags.value[key] = true;\n                if (!overflow.value) overflow.value = true;\n            } else if (bottom !== 0) {\n                break;\n            }\n        }\n        // check position of more button\n        let more: Element | null = element.querySelector('#more');\n        let moreBottom = more!.getBoundingClientRect().bottom;\n        key = undefined;\n        if (\n            overflow.value &&\n            bound &&\n            more &&\n            dropdown &&\n            moreBottom !== 0 &&\n            (moreBottom <= bound - 56 ||\n                (dropdown.childElementCount == 1 && moreBottom <= bound))\n        ) {\n            // dropdown.classList.add(`max-h-${moreBottom - 8}`);\n            let buttonsRemaining: number = dropdown.childElementCount;\n            let index: number = 0;\n            while (moreBottom <= bound - 56 || buttonsRemaining == 1) {\n                let item: Element | null = dropdown.children[index];\n                if (item) {\n                    item.classList.forEach(cl => {\n                        if (cl.includes('identifier')) {\n                            key = cl.slice(11);\n                        }\n                    });\n                    if (key) overflowFlags.value[key] = false;\n                    moreBottom += 48;\n                    buttonsRemaining -= 1;\n                    index += 1;\n                }\n                if (buttonsRemaining === 0) {\n                    overflow.value = false;\n                    break;\n                }\n            }\n        }\n        // clean up flags for items that were removed.\n        Object.keys(overflowFlags.value).forEach((key: string) => {\n            if (!element.querySelector(`.identifier-${key}`))\n                delete overflowFlags.value[key];\n        });\n    });\n});\n</script>\n\n<style lang=\"scss\">\n.appbar {\n    backdrop-filter: blur(5px);\n\n    .appbar-item {\n        @apply my-4 text-gray-400 first:mt-8 hover:text-white;\n    }\n}\n</style>\n","import { FixtureInstance } from '@/api';\n\nimport { AppbarItemInstance } from '../store';\n\nimport type { AppbarFixtureConfig, AppbarItemSet } from '../store';\n\nimport { useAppbarStore } from '../store';\n\nexport class AppbarAPI extends FixtureInstance {\n    /**\n     * Returns `AppbarFixtureConfig` section of the global config file.\n     *\n     * @readonly\n     * @type {AppbarFixtureConfig}\n     * @memberof AppbarFixture\n     */\n    get config(): AppbarFixtureConfig | undefined {\n        return super.config;\n    }\n\n    /**\n     * Parses the appbar config JSON snippet from the config file and save resulting objects to the fixture store.\n     *\n     * @param {AppbarFixtureConfig} [appbarConfig]\n     * @returns\n     * @memberof AppbarAPI\n     */\n    _parseConfig(appbarConfig?: AppbarFixtureConfig) {\n        if (!appbarConfig) {\n            return;\n        }\n\n        const appbarStore = useAppbarStore(this.$vApp.$pinia);\n\n        let config;\n        // wrap the appbar config if needed so it is always a 2d array\n        if (!Array.isArray(appbarConfig.items[0])) {\n            config = [appbarConfig.items];\n        } else {\n            config = appbarConfig.items;\n        }\n\n        const appbarItems: (string | AppbarItemInstance)[][] = [];\n\n        config.forEach((appbarItemList: any[]) => {\n            appbarItems.push(\n                appbarItemList.map(item => {\n                    if (typeof item === 'string') {\n                        return item;\n                    }\n                    return new AppbarItemInstance(item);\n                })\n            );\n        });\n\n        // save appbar items as a collection to the store\n        // they are saves as a set for easy by-id access\n        appbarStore.items = appbarItems\n            .flat()\n            .reduce<AppbarItemSet>((map, item) => {\n                map[item instanceof AppbarItemInstance ? item.id : item] = item;\n                return map;\n            }, {});\n\n        // save an ordered list of item ids to use when rendering components\n        appbarStore.order = appbarItems.map(subArray =>\n            subArray.map(item =>\n                item instanceof AppbarItemInstance ? item.id : item\n            )\n        );\n\n        this._validateItems();\n    }\n\n    /**\n     * Checks if components specified as appbar items are registered or not.\n     *\n     * @memberof AppbarAPI\n     */\n    _validateItems() {\n        const appbarStore = useAppbarStore(this.$vApp.$pinia);\n        // get the ordered list of items and see if any of them are registered\n        appbarStore.order.flat().forEach(id => {\n            if (typeof appbarStore.items[id] === 'string') {\n                return;\n            }\n            // check for components with the id\n            [id].some(v => {\n                if (this.$iApi.fixture.exists(v) && !appbarStore.items[id]) {\n                    // if an item is registered globally, save the name of the registered component\n                    (\n                        appbarStore.items[id] as unknown as AppbarItemInstance\n                    ).componentId = `${v}-appbar-button`;\n                }\n            });\n        });\n    }\n}\n","export default \"key,enValue,enValid,frValue,frValid\\nappbar.navigation,Navigation,1,Navigation,1\\nappbar.more,More,1,Plus,1\\nnavigation.export,Export,1,Exporter,1\\nnavigation.map.export,Export Map,1,Exporter la Carte,1\\n\"","import AppbarV from './appbar.vue';\nimport { AppbarAPI } from './api/appbar';\nimport { useAppbarStore } from './store';\nimport type { AppbarFixtureConfig } from './store';\nimport { GlobalEvents } from '@/api';\nimport messages from './lang/lang.csv?raw';\n\n// \"It's a trap!\" -- Admiral Appbar\n\nclass AppbarFixture extends AppbarAPI {\n    initialized() {\n        // console.log(`[fixture] ${this.id} initialized`);\n    }\n\n    async added() {\n        // console.log(`[fixture] ${this.id} added`);\n\n        // merge in translations since this has no panel\n        Object.entries(messages).forEach(value =>\n            (<any>this.$iApi.$i18n).mergeLocaleMessage(...value)\n        );\n\n        const { destroy, el } = this.mount(AppbarV, {\n            app: this.$element\n        });\n        const innerShell =\n            this.$vApp.$el.getElementsByClassName('inner-shell')[0];\n        innerShell.insertBefore(\n            el.childNodes[0],\n            innerShell.querySelector('.panel-stack')\n        );\n\n        this._parseConfig(this.config);\n        const unwatch = this.$vApp.$watch(\n            () => this.config,\n            (value: AppbarFixtureConfig | undefined) => this._parseConfig(value)\n        );\n\n        const eventHandlers: string[] = [];\n\n        // since components used in appbar can be registered after this point, listen to the global component registration event and re-validate items\n        // TODO revisit. this seems to be self-contained to the appbar fixture, so ideally can stay as is and not worry about events api.\n        eventHandlers.push(\n            this.$iApi.event.on(GlobalEvents.COMPONENT, () => {\n                this._parseConfig(this.config);\n            })\n        );\n\n        this.removed = () => {\n            const appbarStore = useAppbarStore(this.$vApp.$pinia);\n            // console.log(`[fixture] ${this.id} removed`);\n            unwatch();\n            eventHandlers.forEach(h => this.$iApi.event.off(h));\n\n            // gracefully remove all buttons first (in case anything is watching for button removal)\n            const items: any = { ...appbarStore.items };\n            const tempItems: string[] = [...appbarStore.temporary];\n            Object.keys(items).forEach(item => appbarStore.removeButton(item));\n            tempItems.forEach(item => appbarStore.removeButton(item));\n            destroy();\n\n            // reset the store\n            appbarStore.$reset();\n        };\n    }\n}\n\nexport default AppbarFixture;\n"],"names":["AppbarItemInstance","value","params","t","useI18n","iApi","inject","props","__props","panelButton","computed","onClickFunction","_sfc_render","_ctx","_cache","maxSize","_ref","state","name","options","overflow","detectOverflow","_ref2","x","y","_state$rects$popper","width","height","_state$placement$spli","basePlacement","widthProp","heightProp","open","ref","el","dropdownTrigger","dropdown","popperSetUp","applyMaxSize","innerShell","createPopper","onMounted","event","onBeforeUnmount","notificationStore","useNotificationStore","number","onClick","panelStore","usePanelStore","appbarStore","useAppbarStore","items","temporaryItems","overflowFlags","blurEvent","keyupEvent","e","onBeforeMount","instance","getCurrentInstance","onUpdated","nextTick","element","key","children","bound","i","bottom","cl","more","moreBottom","buttonsRemaining","index","item","AppbarAPI","FixtureInstance","appbarConfig","config","appbarItems","appbarItemList","map","subArray","id","v","messages","AppbarFixture","destroy","AppbarV","unwatch","eventHandlers","GlobalEvents","h","tempItems"],"mappings":"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","x_google_ignoreList":[3]}